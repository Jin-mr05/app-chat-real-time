model Room {
    id String @id @default(uuid()) @db.Uuid

    // basic detail 
    name     String
    linkRoom String?
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt

    authorId String? @db.Uuid
    author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    // realtion
    members GroupMember[]
}

model GroupMember {
    id String @id @default(uuid()) @db.Uuid

    userId String   @db.Uuid
    joinAt DateTime @default(now())
    user   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    roomID String @db.Uuid
    room   Room   @relation(fields: [roomID], references: [id], onDelete: Cascade, onUpdate: Cascade)

    roleId String @db.Uuid
    role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([roomID, userId])
}

model Role {
    id String @id @default(uuid()) @db.Uuid

    nameRole String @unique

    // relation
    userRoles       GroupMember[]
    rolePermissions RolePermisson[]
}

model Permission {
    id String @id @default(uuid()) @db.Uuid

    namePermission String
    codePermisson  Int

    // realtion
    rolePermissonId String?        @db.Uuid
    rolePermission  RolePermisson? @relation(fields: [rolePermissonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RolePermisson {
    id String @id @default(uuid()) @db.Uuid

    roleId     String       @db.Uuid
    role       Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    // realtion
    permission Permission[]
}
