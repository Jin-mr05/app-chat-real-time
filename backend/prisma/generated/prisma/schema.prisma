model Session {
  id String @id @default(uuid()) @db.Uuid

  hashedRefreshToken String? // Fix typo: hasedRefreshToken -> hashedRefreshToken

  // relation - Fix typo: realtion -> relation
  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) // Fix typo: createAt -> createdAt
  updatedAt DateTime @updatedAt // Fix typo: updateAt -> updatedAt

  @@map("sessions") // Thêm table mapping
}

model Code {
  id String @id @default(uuid()) @db.Uuid

  code String?
  type CodeType

  // relation - Fix typo: realtion -> relation
  userId String? @unique @db.Uuid
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) // Fix typo: createAt -> createdAt
  updatedAt DateTime @updatedAt // Fix typo: updateAt -> updatedAt

  @@map("codes") // Thêm table mapping
}

enum CodeType {
  VERIFY
  RESET_PASSWORD
}

model PrivateChat {
  id            String    @id @default(uuid()) @db.Uuid
  user1Id       String    @db.Uuid
  user2Id       String    @db.Uuid
  lastMessage   String?
  lastMessageAt DateTime?

  // Lưu index tin nhắn cuối cùng mà mỗi user đã đọc
  user1LastReadIndex Int @default(0)
  user2LastReadIndex Int @default(0)

  // Tổng số tin nhắn để tính unread count nhanh
  totalMessages Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user1          User             @relation("User1Chats", fields: [user1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user2          User             @relation("User2Chats", fields: [user2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PrivateMessage PrivateMessage[]
  TypingStatus   TypingStatus[]

  // Indexes
  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@index([lastMessageAt])
  @@map("private_chats")
}

model PrivateMessage {
  id       String      @id @default(uuid()) @db.Uuid
  content  String      @db.Text
  type     MessageType @default(TEXT)
  chatId   String      @db.Uuid
  senderId String      @db.Uuid

  messageIndex Int

  // Metadata cho file/media
  fileUrl  String?
  fileName String?
  fileSize Int?
  mimeType String?

  // Reply functionality
  replyToId String?          @db.Uuid
  replyTo   PrivateMessage?  @relation("MessageReply", fields: [replyToId], references: [id])
  replies   PrivateMessage[] @relation("MessageReply")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chat   PrivateChat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sender User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([chatId, messageIndex])
  @@index([chatId, messageIndex])
  @@index([senderId])
  @@index([replyToId])
  @@map("private_messages")
}

// Enum cho message type
enum MessageType {
  TEXT
  IMAGE
  FILE
  VIDEO
  AUDIO
  EMOJI
  STICKER
  LOCATION
  SYSTEM // Cho system messages như "User joined", "User left"
}

// Model riêng cho typing status (optional - có thể dùng Redis)
model TypingStatus {
  id     String @id @default(uuid()) @db.Uuid
  chatId String @db.Uuid
  userId String @db.Uuid

  createdAt DateTime @default(now())

  chat PrivateChat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("typing_status")
}

model Message {
  id Int @id @default(autoincrement())

  content String
  staus   StatusMessage @default(SENDING)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  // id room 
  roomId    String?
  addressId String?

  // realtion
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ReadProgram {
  id              String @id @default(uuid()) @db.Uuid
  lastestMessgaId Int?   @default(0)

  userId String @unique @db.Uuid
  roomId String @db.Uuid

  // realtion
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, roomId])
}

enum StatusMessage {
  SENDING
  RECEIVED
  READ
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id String @id @default(uuid()) @db.Uuid

  // basic detail 
  name     String
  linkRoom String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  authorId String? @db.Uuid
  author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // realtion
  members      GroupMember[]
  readPrograms ReadProgram[]
}

model GroupMember {
  id String @id @default(uuid()) @db.Uuid

  userId String   @db.Uuid
  joinAt DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  roomID String @db.Uuid
  room   Room   @relation(fields: [roomID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  roleId String @db.Uuid
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([roomID, userId])
}

model Role {
  id String @id @default(uuid()) @db.Uuid

  nameRole String @unique

  // relation
  userRoles       GroupMember[]
  rolePermissions RolePermisson[]
}

model Permission {
  id String @id @default(uuid()) @db.Uuid

  namePermission String
  codePermisson  Int

  // realtion
  rolePermissonId String?        @db.Uuid
  rolePermission  RolePermisson? @relation(fields: [rolePermissonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RolePermisson {
  id String @id @default(uuid()) @db.Uuid

  roleId     String       @db.Uuid
  role       Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // realtion
  permission Permission[]
}

model User {
  id String @id @default(uuid()) @db.Uuid

  // basic detail 
  name       String?
  birthday   DateTime?
  gender     Gender?
  lastSeenAt DateTime?

  //auth 
  email          String  @unique
  hashedPassword String
  isActive       Boolean @default(false)

  idDelete Boolean   @default(false)
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?

  // realtion 
  session       Session?
  code          Code?
  memberGroups  GroupMember[]
  createdGroups Room[]
  messages      Message[]
  readProgram   ReadProgram[]
  chatsUser1    PrivateChat[]    @relation("User1Chats")
  chatsUser2    PrivateChat[]    @relation("User2Chats")
  sentMessages  PrivateMessage[] @relation("SentMessages")
  typingStatus  TypingStatus[]

  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}
