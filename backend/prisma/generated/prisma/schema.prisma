model Session {
  id String @id @default(uuid()) @db.Uuid

  hashedRefreshToken String?   @db.VarChar(255)
  userIp             String    @db.VarChar(45) // IPv6 max length
  expiresAt          DateTime? // Thêm field để track session expiration
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // foreign keys
  userId       String @db.Uuid
  userDeviceId String @db.Uuid

  // relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDevice UserDevice @relation(fields: [userDeviceId], references: [id], onDelete: Cascade)

  @@unique([userId, userDeviceId])
  @@index([userId]) // Index for user lookup
  @@index([userDeviceId]) // Index for device lookup
  @@index([createdAt]) // Index for session expiration queries
  @@index([userId, createdAt]) // Composite index for user's recent sessions
  @@map("sessions")
}

model Code {
  id String @id @default(uuid()) @db.Uuid

  code      String?  @db.VarChar(10)
  type      CodeType
  expiresAt DateTime // Thêm field để track code expiration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  userId String? @unique @db.Uuid

  // relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, type]) // Mỗi user chỉ có 1 code active cho mỗi type
  @@index([userId]) // Index for user lookup
  @@index([expiresAt]) // Index for cleanup expired codes
  @@map("codes")
}

model UserDevice {
  id         String   @id @default(uuid()) @db.Uuid
  deviceName String   @db.VarChar(255)
  deviceType String?  @db.VarChar(50) // iOS, Android, Web, Desktop
  lastUsedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // foreign keys
  userId String @db.Uuid

  // relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions Session[]

  @@unique([deviceName, userId])
  @@index([userId]) // Index for user lookup
  @@index([lastUsedAt]) // Index for inactive device cleanup
  @@map("user_devices")
}

enum CodeType {
  VERIFY
  RESET_PASSWORD
}

model ReadReceipt {
  id String @id @default(uuid()) @db.Uuid

  readAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  messageId String @db.Uuid
  userId    String @db.Uuid

  // relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId]) // Ensure user can only read once per message
  @@index([messageId]) // Index for message lookup
  @@index([userId]) // Index for user lookup
  @@index([readAt]) // Index for sorting by read time
  @@map("read_receipts")
}

model MessageReaction {
  id String @id @default(uuid()) @db.Uuid

  emoji     String   @db.VarChar(10) // Emoji character or code
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  messageId String @db.Uuid
  userId    String @db.Uuid

  // relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji]) // User can only react once with same emoji per message
  @@index([messageId]) // Index for message lookup
  @@index([userId]) // Index for user lookup
  @@index([messageId, emoji]) // Composite index for reaction queries
  @@map("message_reactions")
}

enum MessageTypes {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  VOICE
  LOCATION
}

model Room {
  id             String    @id @default(uuid()) @db.Uuid
  link           String    @unique @map("room_link") @db.VarChar(255)
  totalMessage   Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       String    @db.Uuid
  // relations
  members        Member[]
  messagesInRoom Message[]

  @@index([createdAt])
  @@index([updatedAt])
}

model Member {
  id        String   @id @default(ulid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign key 
  userId String @db.Uuid
  roomId String @db.Uuid

  // relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onUpdate: Cascade)

  @@unique([userId, roomId])
  @@index([roomId])
  @@index([userId])
  @@index([createdAt])
}

model Message {
  id        String      @id @default(uuid()) @db.Uuid
  content   String      @db.VarChar(1000)
  type      MessageType @default(TEXT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  roomId    String      @db.Uuid
  repLyId   String?     @db.Uuid
  senderId  String      @db.Uuid

  // relations
  ReadReceipt     ReadReceipt[]
  MessageReaction MessageReaction[]
  room            Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([createdAt])
  @@index([updatedAt])
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VIDEO
  AUDIO
  EMOJI
  STICKER
  LOCATION
  SYSTEM
}

model TypingStatus {
  id     String @id @default(uuid()) @db.Uuid
  chatId String @db.Uuid
  userId String @db.Uuid

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([userId])
  @@index([chatId])
  @@map("typing_status")
}

enum ChatType {
  DIRECT
  GROUP
}

enum ChatMemberRole {
  ADMIN
  MEMBER
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FriendRequest {
  id String @id @default(uuid()) @db.Uuid

  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // foreign keys
  senderId   String @db.Uuid
  receiverId String @db.Uuid

  // relations
  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId]) // Prevent duplicate friend requests
  @@index([senderId]) // Index for sender lookup
  @@index([receiverId]) // Index for receiver lookup
  @@index([status]) // Index for filtering by status
  @@index([createdAt]) // Index for sorting by date
  @@map("friend_requests")
}

model Friendship {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  user1Id String @db.Uuid
  user2Id String @db.Uuid

  // relations
  user1 User @relation("User1Friendships", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 User @relation("User2Friendships", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id]) // Ensure unique friendship
  @@index([user1Id]) // Index for user1 lookup
  @@index([user2Id]) // Index for user2 lookup
  @@index([user1Id, user2Id]) // Composite index for friendship queries
  @@map("friendships")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id String @id @default(uuid()) @db.Uuid

  // basic detail 
  fullName   String    @db.VarChar(255)
  avatar     String?   @db.Text
  bio        String?   @db.Text
  isVerified Boolean   @default(false)
  isOnline   Boolean   @default(false)
  isDeleted  Boolean   @default(false)
  lastSeenAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  //auth 
  email          String @unique @db.VarChar(255)
  hashedPassword String @db.VarChar(255)

  // relations
  sessions               Session[]
  codes                  Code[]
  userDevices            UserDevice[]
  sentFriendRequests     FriendRequest[]   @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]   @relation("ReceivedFriendRequests")
  friendships1           Friendship[]      @relation("User1Friendships")
  friendships2           Friendship[]      @relation("User2Friendships")
  readReceipts           ReadReceipt[]
  reactions              MessageReaction[]
  TypingStatus           TypingStatus[]
  memberInRooms          Member[]
  messages               Message[]

  @@index([email]) // Index for login lookup
  @@index([isOnline]) // Index for online users query
  @@index([createdAt]) // Index for new users query
  @@map("users")
}
