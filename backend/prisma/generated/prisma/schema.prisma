model Session {
  id String @id @default(uuid()) @db.Uuid

  hasedRefreshToken String?

  // realtion
  userId String? @unique @db.Uuid
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Code {
  id String @id @default(uuid()) @db.Uuid

  code String?
  type CodeType

  // realtion 
  userId String? @unique @db.Uuid
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

enum CodeType {
  VERIFY
  RESET_PASSWORD
}

model Message {
  id Int @id @default(autoincrement())

  content String
  staus   StatusMessage @default(SENDING)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  // id room 
  roomId    String?
  addressId String?

  // realtion
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ReadProgram {
  id String @id @default(uuid()) @db.Uuid

  lastestMessgaId Int? @default(0)

  // realtion
  userId String? @unique @db.Uuid
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

enum StatusMessage {
  SENDING
  RECEIVED
  READ
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id String @id @default(uuid()) @db.Uuid

  // basic detail 
  name     String
  linkRoom String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  authorId String? @db.Uuid
  author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // realtion
  members GroupMember[]
}

model GroupMember {
  id String @id @default(uuid()) @db.Uuid

  userId String   @db.Uuid
  joinAt DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  groupId String @db.Uuid
  group   Room   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([groupId, userId])
}

model Role {
  id String @id @default(uuid()) @db.Uuid

  nameRole String

  // realtion
  userRoleId String?   @db.Uuid
  userRole   UserRole? @relation(fields: [userRoleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  rolePermisson RolePermisson[]
}

model UserRole {
  id String @id @default(uuid()) @db.Uuid

  // realtion
  userId String? @db.Uuid
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roles  Role[]
}

model Permission {
  id String @id @default(uuid()) @db.Uuid

  namePermission String
  codePermisson  Int

  // realtion
  rolePermissonId String?        @db.Uuid
  rolePermission  RolePermisson? @relation(fields: [rolePermissonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RolePermisson {
  id String @id @default(uuid()) @db.Uuid

  roleId     String       @db.Uuid
  role       Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // realtion
  permission Permission[]
}

model User {
  id String @id @default(uuid()) @db.Uuid

  // basic detail 
  name     String?
  birthday DateTime?
  gender   Gender?

  //auth 
  email          String    @unique
  hashedPassword String
  isActive       Boolean   @default(false)
  idDelete       Boolean   @default(false)
  createAt       DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  deleteAt       DateTime?

  // realtion
  session       Session?
  code          Code?
  roles         UserRole[]
  memberGroups  GroupMember[]
  createdGroups Room[]
  messages      Message[]
  readProgram   ReadProgram?
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}
