
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  hashedRefreshToken: 'hashedRefreshToken',
  userIp: 'userIp',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  userDeviceId: 'userDeviceId'
};

exports.Prisma.CodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  type: 'type',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UserDeviceScalarFieldEnum = {
  id: 'id',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.ReadReceiptScalarFieldEnum = {
  id: 'id',
  readAt: 'readAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  messageId: 'messageId',
  userId: 'userId'
};

exports.Prisma.MessageReactionScalarFieldEnum = {
  id: 'id',
  emoji: 'emoji',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  messageId: 'messageId',
  userId: 'userId'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  link: 'link',
  totalMessage: 'totalMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  roomId: 'roomId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  roomId: 'roomId',
  repLyId: 'repLyId',
  senderId: 'senderId'
};

exports.Prisma.TypingStatusScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.FriendRequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  senderId: 'senderId',
  receiverId: 'receiverId'
};

exports.Prisma.FriendshipScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  user1Id: 'user1Id',
  user2Id: 'user2Id'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  avatar: 'avatar',
  bio: 'bio',
  isVerified: 'isVerified',
  isOnline: 'isOnline',
  isDeleted: 'isDeleted',
  lastSeenAt: 'lastSeenAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  hashedPassword: 'hashedPassword'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.CodeType = exports.$Enums.CodeType = {
  VERIFY: 'VERIFY',
  RESET_PASSWORD: 'RESET_PASSWORD'
};

exports.MessageTypes = exports.$Enums.MessageTypes = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  FILE: 'FILE',
  VOICE: 'VOICE',
  LOCATION: 'LOCATION'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  FILE: 'FILE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  EMOJI: 'EMOJI',
  STICKER: 'STICKER',
  LOCATION: 'LOCATION',
  SYSTEM: 'SYSTEM'
};

exports.ChatType = exports.$Enums.ChatType = {
  DIRECT: 'DIRECT',
  GROUP: 'GROUP'
};

exports.ChatMemberRole = exports.$Enums.ChatMemberRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

exports.FriendRequestStatus = exports.$Enums.FriendRequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  Session: 'Session',
  Code: 'Code',
  UserDevice: 'UserDevice',
  ReadReceipt: 'ReadReceipt',
  MessageReaction: 'MessageReaction',
  Room: 'Room',
  Member: 'Member',
  Message: 'Message',
  TypingStatus: 'TypingStatus',
  FriendRequest: 'FriendRequest',
  Friendship: 'Friendship',
  User: 'User'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/andev/work_space/app-chat-real-time/backend/prisma/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/andev/work_space/app-chat-real-time/backend/prisma/schema/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../schema",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "model Session {\n  id String @id @default(uuid()) @db.Uuid\n\n  hashedRefreshToken String?   @db.VarChar(255)\n  userIp             String    @db.VarChar(45) // IPv6 max length\n  expiresAt          DateTime? // Thêm field để track session expiration\n  createdAt          DateTime  @default(now())\n  updatedAt          DateTime  @updatedAt\n\n  // foreign keys\n  userId       String @db.Uuid\n  userDeviceId String @db.Uuid\n\n  // relations\n  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userDevice UserDevice @relation(fields: [userDeviceId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, userDeviceId])\n  @@index([userId]) // Index for user lookup\n  @@index([userDeviceId]) // Index for device lookup\n  @@index([createdAt]) // Index for session expiration queries\n  @@index([userId, createdAt]) // Composite index for user's recent sessions\n  @@map(\"sessions\")\n}\n\nmodel Code {\n  id String @id @default(uuid()) @db.Uuid\n\n  code      String?  @db.VarChar(10)\n  type      CodeType\n  expiresAt DateTime // Thêm field để track code expiration\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // foreign keys\n  userId String? @unique @db.Uuid\n\n  // relations\n  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  @@unique([userId, type]) // Mỗi user chỉ có 1 code active cho mỗi type\n  @@index([userId]) // Index for user lookup\n  @@index([expiresAt]) // Index for cleanup expired codes\n  @@map(\"codes\")\n}\n\nmodel UserDevice {\n  id         String   @id @default(uuid()) @db.Uuid\n  deviceName String   @db.VarChar(255)\n  deviceType String?  @db.VarChar(50) // iOS, Android, Web, Desktop\n  lastUsedAt DateTime @default(now())\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  // foreign keys\n  userId String @db.Uuid\n\n  // relations\n  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  sessions Session[]\n\n  @@unique([deviceName, userId])\n  @@index([userId]) // Index for user lookup\n  @@index([lastUsedAt]) // Index for inactive device cleanup\n  @@map(\"user_devices\")\n}\n\nenum CodeType {\n  VERIFY\n  RESET_PASSWORD\n}\n\nmodel ReadReceipt {\n  id String @id @default(uuid()) @db.Uuid\n\n  readAt    DateTime @default(now())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // foreign keys\n  messageId String @db.Uuid\n  userId    String @db.Uuid\n\n  // relations\n  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([messageId, userId]) // Ensure user can only read once per message\n  @@index([messageId]) // Index for message lookup\n  @@index([userId]) // Index for user lookup\n  @@index([readAt]) // Index for sorting by read time\n  @@map(\"read_receipts\")\n}\n\nmodel MessageReaction {\n  id String @id @default(uuid()) @db.Uuid\n\n  emoji     String   @db.VarChar(10) // Emoji character or code\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // foreign keys\n  messageId String @db.Uuid\n  userId    String @db.Uuid\n\n  // relations\n  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([messageId, userId, emoji]) // User can only react once with same emoji per message\n  @@index([messageId]) // Index for message lookup\n  @@index([userId]) // Index for user lookup\n  @@index([messageId, emoji]) // Composite index for reaction queries\n  @@map(\"message_reactions\")\n}\n\nenum MessageTypes {\n  TEXT\n  IMAGE\n  VIDEO\n  AUDIO\n  FILE\n  VOICE\n  LOCATION\n}\n\nmodel Room {\n  id             String    @id @default(uuid()) @db.Uuid\n  link           String    @unique @map(\"room_link\") @db.VarChar(255)\n  totalMessage   Int       @default(0)\n  createdAt      DateTime  @default(now())\n  updatedAt      DateTime  @updatedAt\n  authorId       String    @db.Uuid\n  // relations\n  members        Member[]\n  messagesInRoom Message[]\n\n  @@index([createdAt])\n  @@index([updatedAt])\n}\n\nmodel Member {\n  id        String   @id @default(ulid()) @db.Uuid\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // foreign key \n  userId String @db.Uuid\n  roomId String @db.Uuid\n\n  // relation\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  room Room @relation(fields: [roomId], references: [id], onUpdate: Cascade)\n\n  @@unique([userId, roomId])\n  @@index([roomId])\n  @@index([userId])\n  @@index([createdAt])\n}\n\nmodel Message {\n  id        String      @id @default(uuid()) @db.Uuid\n  content   String      @db.VarChar(1000)\n  type      MessageType @default(TEXT)\n  createdAt DateTime    @default(now())\n  updatedAt DateTime    @updatedAt\n  roomId    String      @db.Uuid\n  repLyId   String?     @db.Uuid\n  senderId  String      @db.Uuid\n\n  // relations\n  ReadReceipt     ReadReceipt[]\n  MessageReaction MessageReaction[]\n  room            Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)\n  user            User              @relation(fields: [senderId], references: [id], onDelete: Cascade)\n\n  @@index([type])\n  @@index([createdAt])\n  @@index([updatedAt])\n}\n\nenum MessageType {\n  TEXT\n  IMAGE\n  FILE\n  VIDEO\n  AUDIO\n  EMOJI\n  STICKER\n  LOCATION\n  SYSTEM\n}\n\nmodel TypingStatus {\n  id     String @id @default(uuid()) @db.Uuid\n  chatId String @db.Uuid\n  userId String @db.Uuid\n\n  createdAt DateTime @default(now())\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([chatId, userId])\n  @@index([userId])\n  @@index([chatId])\n  @@map(\"typing_status\")\n}\n\nenum ChatType {\n  DIRECT\n  GROUP\n}\n\nenum ChatMemberRole {\n  ADMIN\n  MEMBER\n}\n\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel FriendRequest {\n  id String @id @default(uuid()) @db.Uuid\n\n  status    FriendRequestStatus @default(PENDING)\n  createdAt DateTime            @default(now())\n  updatedAt DateTime            @updatedAt\n\n  // foreign keys\n  senderId   String @db.Uuid\n  receiverId String @db.Uuid\n\n  // relations\n  sender   User @relation(\"SentFriendRequests\", fields: [senderId], references: [id], onDelete: Cascade)\n  receiver User @relation(\"ReceivedFriendRequests\", fields: [receiverId], references: [id], onDelete: Cascade)\n\n  @@unique([senderId, receiverId]) // Prevent duplicate friend requests\n  @@index([senderId]) // Index for sender lookup\n  @@index([receiverId]) // Index for receiver lookup\n  @@index([status]) // Index for filtering by status\n  @@index([createdAt]) // Index for sorting by date\n  @@map(\"friend_requests\")\n}\n\nmodel Friendship {\n  id String @id @default(uuid()) @db.Uuid\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // foreign keys\n  user1Id String @db.Uuid\n  user2Id String @db.Uuid\n\n  // relations\n  user1 User @relation(\"User1Friendships\", fields: [user1Id], references: [id], onDelete: Cascade)\n  user2 User @relation(\"User2Friendships\", fields: [user2Id], references: [id], onDelete: Cascade)\n\n  @@unique([user1Id, user2Id]) // Ensure unique friendship\n  @@index([user1Id]) // Index for user1 lookup\n  @@index([user2Id]) // Index for user2 lookup\n  @@index([user1Id, user2Id]) // Composite index for friendship queries\n  @@map(\"friendships\")\n}\n\nenum FriendRequestStatus {\n  PENDING\n  ACCEPTED\n  REJECTED\n}\n\nmodel User {\n  id String @id @default(uuid()) @db.Uuid\n\n  // basic detail \n  fullName   String    @db.VarChar(255)\n  avatar     String?   @db.Text\n  bio        String?   @db.Text\n  isVerified Boolean   @default(false)\n  isOnline   Boolean   @default(false)\n  isDeleted  Boolean   @default(false)\n  lastSeenAt DateTime?\n  createdAt  DateTime  @default(now())\n  updatedAt  DateTime  @updatedAt\n\n  //auth \n  email          String @unique @db.VarChar(255)\n  hashedPassword String @db.VarChar(255)\n\n  // relations\n  sessions               Session[]\n  codes                  Code[]\n  userDevices            UserDevice[]\n  sentFriendRequests     FriendRequest[]   @relation(\"SentFriendRequests\")\n  receivedFriendRequests FriendRequest[]   @relation(\"ReceivedFriendRequests\")\n  friendships1           Friendship[]      @relation(\"User1Friendships\")\n  friendships2           Friendship[]      @relation(\"User2Friendships\")\n  readReceipts           ReadReceipt[]\n  reactions              MessageReaction[]\n  TypingStatus           TypingStatus[]\n  memberInRooms          Member[]\n  messages               Message[]\n\n  @@index([email]) // Index for login lookup\n  @@index([isOnline]) // Index for online users query\n  @@index([createdAt]) // Index for new users query\n  @@map(\"users\")\n}\n",
  "inlineSchemaHash": "92b62c47dd2b38238b42fab811ac1f8199fa2fb3431fd92b9bba81464c5fb08a",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hashedRefreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userIp\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userDeviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"},{\"name\":\"userDevice\",\"kind\":\"object\",\"type\":\"UserDevice\",\"relationName\":\"SessionToUserDevice\"}],\"dbName\":\"sessions\"},\"Code\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"CodeType\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CodeToUser\"}],\"dbName\":\"codes\"},\"UserDevice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastUsedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserDevice\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUserDevice\"}],\"dbName\":\"user_devices\"},\"ReadReceipt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"readAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageToReadReceipt\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReadReceiptToUser\"}],\"dbName\":\"read_receipts\"},\"MessageReaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emoji\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageToMessageReaction\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageReactionToUser\"}],\"dbName\":\"message_reactions\"},\"Room\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"link\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"room_link\"},{\"name\":\"totalMessage\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"members\",\"kind\":\"object\",\"type\":\"Member\",\"relationName\":\"MemberToRoom\"},{\"name\":\"messagesInRoom\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageToRoom\"}],\"dbName\":null},\"Member\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roomId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MemberToUser\"},{\"name\":\"room\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"MemberToRoom\"}],\"dbName\":null},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"MessageType\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"roomId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"repLyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ReadReceipt\",\"kind\":\"object\",\"type\":\"ReadReceipt\",\"relationName\":\"MessageToReadReceipt\"},{\"name\":\"MessageReaction\",\"kind\":\"object\",\"type\":\"MessageReaction\",\"relationName\":\"MessageToMessageReaction\"},{\"name\":\"room\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"MessageToRoom\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageToUser\"}],\"dbName\":null},\"TypingStatus\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TypingStatusToUser\"}],\"dbName\":\"typing_status\"},\"FriendRequest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"FriendRequestStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"receiverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SentFriendRequests\"},{\"name\":\"receiver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReceivedFriendRequests\"}],\"dbName\":\"friend_requests\"},\"Friendship\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user1Id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user2Id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user1\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"User1Friendships\"},{\"name\":\"user2\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"User2Friendships\"}],\"dbName\":\"friendships\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isOnline\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isDeleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastSeenAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hashedPassword\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"codes\",\"kind\":\"object\",\"type\":\"Code\",\"relationName\":\"CodeToUser\"},{\"name\":\"userDevices\",\"kind\":\"object\",\"type\":\"UserDevice\",\"relationName\":\"UserToUserDevice\"},{\"name\":\"sentFriendRequests\",\"kind\":\"object\",\"type\":\"FriendRequest\",\"relationName\":\"SentFriendRequests\"},{\"name\":\"receivedFriendRequests\",\"kind\":\"object\",\"type\":\"FriendRequest\",\"relationName\":\"ReceivedFriendRequests\"},{\"name\":\"friendships1\",\"kind\":\"object\",\"type\":\"Friendship\",\"relationName\":\"User1Friendships\"},{\"name\":\"friendships2\",\"kind\":\"object\",\"type\":\"Friendship\",\"relationName\":\"User2Friendships\"},{\"name\":\"readReceipts\",\"kind\":\"object\",\"type\":\"ReadReceipt\",\"relationName\":\"ReadReceiptToUser\"},{\"name\":\"reactions\",\"kind\":\"object\",\"type\":\"MessageReaction\",\"relationName\":\"MessageReactionToUser\"},{\"name\":\"TypingStatus\",\"kind\":\"object\",\"type\":\"TypingStatus\",\"relationName\":\"TypingStatusToUser\"},{\"name\":\"memberInRooms\",\"kind\":\"object\",\"type\":\"Member\",\"relationName\":\"MemberToUser\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageToUser\"}],\"dbName\":\"users\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

